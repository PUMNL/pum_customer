<?php

require_once 'businessconfig.inc';
require_once 'conditions.inc';

function pum_customer_menu() {
  $items = array();

  $items['customer/condition/update/%'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'Update condition', //page title
    'description' => 'Update condition',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('pum_customer_condition_update_form', 3), //put the name of the form here
    'access callback' => 'pum_customer_user_has_role',
    'access arguments' => array(array('Customer (contact)', 'Representative')), // arg 1 loads the user, arg 2 is the role name
  );
  $items['customer/proposedexpert/cv/%'] = array(
    'title' => 'CV of Proposed expert',
    'description' => '',
    'page callback' => 'pum_customer_cv_proposedexpert',
    'page arguments' => array(3),
    'access callback' => 'pum_customer_user_has_role',
    'access arguments' => array(array('Customer (contact)', 'Representative')),
    'file' => 'pages/cv_proposedexpert.inc',
  );
  $items['customer/proposedexpert/cv/%/question'] = array(
    'title' => 'Ask question about proposed expert',
    'page callback' => 'drupal_get_form',
    'file' => 'pages/question_about_cv.inc',
    'page arguments' => array('pum_customer_question_about_cv', 3),
    'access callback' => 'pum_customer_user_has_role',
    'access arguments' => array(array('Customer (contact)', 'Representative')),
  );
  $items['customer/business-programme-details/%'] = array(
    'title' => 'Business Programme details',
    'page callback' => 'drupal_get_form',
    'file' => 'pages/business_programme.inc',
    'page arguments' => array('pum_customer_business_programme_details', 2),
    'access callback' => 'pum_customer_user_has_role_and_is_on_case',
    'access arguments' => array(array('Customer (contact)'), 2),
  );
  $items['customer/business-programme-details/%/removedocument/%'] = array(
    'title' => 'Business Programme details',
    'page callback' => 'pum_customer_business_programme_details_removedocument',
    'file' => 'pages/business_programme.inc',
    'page arguments' => array(2, 4),
    'access callback' => 'pum_customer_user_has_role_and_is_on_case',
    'access arguments' => array(array('Customer (contact)'), 2),
  );
  $items['customer/business-programme-details/%/participant'] = array(
    'title' => 'Business Programme participant',
    'page callback' => 'drupal_get_form',
    'file' => 'pages/business_programme_participant.inc',
    'page arguments' => array('pum_customer_business_programme_participant', 2),
    'access callback' => 'pum_customer_user_has_role_and_is_on_case',
    'access arguments' => array(array('Customer (contact)'), 2),
  );
  $items['customer/business-programme-details/%/participant/%'] = array(
    'title' => 'Business Programme participant',
    'page callback' => 'drupal_get_form',
    'file' => 'pages/business_programme_participant.inc',
    'page arguments' => array('pum_customer_business_programme_participant', 2,4),
    'access callback' => 'pum_customer_user_has_role_and_is_on_case',
    'access arguments' => array(array('Customer (contact)'), 2),
  );
  $items['customer/business-programme-details/%/participant/%/remove'] = array(
    'title' => 'Business Programme participant',
    'page callback' => 'pum_customer_business_programme_participant_remove',
    'file' => 'pages/business_programme_participant.inc',
    'page arguments' => array(2,4),
    'access callback' => 'pum_customer_user_has_role_and_is_on_case',
    'access arguments' => array(array('Customer (contact)'), 2),
  );

  return $items;
}

/**
 * Returns true when the user has a certain drupal role and is connected to the
 * case.
 *
 * @param $roles
 * @param $case_id
 * @return bool
 */
function pum_customer_user_has_role_and_is_on_case($roles, $case_id) {
  if (!pum_customer_user_has_role($roles)) {
    return false;
  }
  if (!pum_customer_user_has_role_on_case($case_id)) {
    return false;
  }
  return true;
}

/**
 * Returns true when a user has a role on the case.
 *
 * @param $case_id
 * @return bool
 */
function pum_customer_user_has_role_on_case($case_id) {
  civicrm_initialize();
  $session = CRM_Core_Session::singleton();
  $contact_id = $session->get('userID');
  $case = civicrm_api3('Case', 'getsingle', array('id' => $case_id));
  foreach($case['contacts'] as $contact) {
    if ($contact['contact_id'] == $contact_id) {
      return true;
    }
  }
  return false;
}

function pum_customer_block_info() {
  $blocks['expert_will_arrive'] = array(
    'info' => t('Your expert will arrive in 7 days'),
  );
  return $blocks;
}

function pum_customer_token_info() {
  $node['current_project_request'] = array(
    'name' => t('Current project request'),
    'description' => t('The details of the current project request'),
  );
  $node['current_project_request_title'] = array(
    'name' => t('Currnt subject of project request'),
    'description' => t('The subject of the current project request case'),
  );
  return array(
    'tokens' => array('node' => $node),
  );
}

function pum_customer_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'expert_will_arrive':
      _pum_customer_your_expert_will_arrive_block($block);
      break;
  }
  return $block;
}

function pum_customer_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'node') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'current_project_request':
          $request = '';
          $queryParameters = drupal_get_query_parameters();
          if (!empty($queryParameters['caseid'])) {
            $request = _pum_customer_get_project_request_details($queryParameters['caseid']);
          }
          $replacements[$original] = $request;
          break;
        case 'current_project_request_title':
          $request = '';
          $queryParameters = drupal_get_query_parameters();
          if (!empty($queryParameters['caseid'])) {
            $request = _pum_customer_get_project_request_title($queryParameters['caseid']);
          }
          $replacements[$original] = $request;
          break;
      }
    }
  }

  // Return the replacements.
  return $replacements;
}

/**
 * Alter webform.
 *
 * Alter the webform assess project request by rep and convert the
 * dropdown with assess/reject to buttons. We loop through all elements on the
 * form and check whether the element is this select element.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function pum_customer_form_alter(&$form, &$form_state, $form_id) {
  if (stripos($form_id, 'webform_client_form_') === 0) {
    // Add a styleshet for mark up of approve and select button
    drupal_add_css(drupal_get_path('module', 'pum_customer') . '/style.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
}

/**
 * When a user with the role 'Customer (contact)' is viewing its own profile redirect it to
 * the edit form of the profile.
 *
 * @param $build
 * @param $type
 */
function pum_customer_user_view_alter($build, $type) {
  global $user;
  if ($build['#account']->uid == $user->uid && in_array('Customer (contact)', $user->roles)) {
    drupal_goto('user/'.$user->uid.'/edit');
  }
}

/**
 * Alter the invokation of hook form_alter and make sure our hook is called after the system hooks.
 *
 * @param $implementations
 * @param $hook
 */
function pum_customer_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Make sure our form_user_profile_form_alter is executed after
    // the system_form_user_profile_form_alter so that we can
    // remove the field timezone.
    $group = $implementations['pum_customer'];
    unset($implementations['pum_customer']);
    $implementations['pum_customer'] = $group;
  }
}

/**
 * When a user with the role 'Customer (contact)' is editing its profile remove all local tasks.
 *
 * @param $data
 * @param $router_item
 * @param $root_path
 */
function pum_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;
  if ($root_path == 'user/%/edit' && in_array('Customer (contact)', $user->roles)) {
    foreach ($data['tabs'][0]['output'] as $index => $tab) {
      $data['tabs'][0]['output']['#access'] = FALSE;
    }
    foreach($data['tabs'][1]['output'] as $index => $tab) {
      $data['tabs'][1]['output']['#access'] = false;
    }
  }
}

/**
 * Alter the profile edit form and remove all unneccessary fields. Only for the users
 * with the role 'Customer (contact)'.
 *
 * @param $form
 * @param $form_state
 */
function pum_customer_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  if ($form['#user']->uid == $user->uid && in_array('Customer (contact)', $user->roles)) {
    $form['mimemail']['#access'] = FALSE;
    $form['account']['timezone']['#access'] = TRUE;
    $form['field_email_preferences']['#access'] = FALSE;
    $form['timezone']['#access'] = FALSE;
    $form['picture']['#access'] = FALSE;
    $form['actions']['submit']['#submit'][] = 'pum_customer_form_user_profile_submit';
  }
}

/**
 * Redirect the user edit form back to portal.
 *
 * @param $form
 * @param $form_state
 */
function pum_customer_form_user_profile_submit($form, &$form_state) {
  $form_state['redirect'] = array('portal');
}

function _pum_customer_get_project_request_title($case_id) {
  civicrm_initialize();
  $project = '';
  try {
    $project_id = CRM_Threepeas_BAO_PumCaseProject::getProjectIdWithCaseId($case_id);
    $project = CRM_Threepeas_BAO_PumProject::getProjectTitleWithId($project_id);
  } catch (Exception $e) {
    return '';
  }

  return $project;
}

function _pum_customer_get_project_request_details($case_id) {
  civicrm_initialize();
  $activityTypeOptionGroupId = civicrm_api3('OptionGroup', 'getvalue', array('name' => 'activity_type', 'return' => 'id'));
  $openCaseActivityType = civicrm_api3('OptionValue', 'getvalue', array('option_group_id' => $activityTypeOptionGroupId, 'name' => 'Open case', 'return' => 'value'));
  $caseTypeOptionGroupId = civicrm_api3('OptionGroup', 'getvalue', array('name' => 'case_type', 'return' => 'id'));
  $projectIntakeCaseType = civicrm_api3('OptionValue', 'getvalue', array('option_group_id' => $caseTypeOptionGroupId, 'name' => 'Projectintake', 'return' => 'value'));

  try {
    $case = civicrm_api3('Case', 'getsingle', array('id' => $case_id));
  } catch (Exception $e) {
    return '';
  }
  if ($case['case_type_id'] != $projectIntakeCaseType) {
    return '';
  }

  $projectIntake = '';
  $caseActivities = civicrm_api3('CaseActivity', 'get', array('case_id' => $case['id'], 'sequential' => 1, 'option.limit' => 99999));
  foreach($caseActivities['values'] as $caseActivity) {
    if ($caseActivity['activity_type_id'] == $openCaseActivityType) {
      $projectIntake = $caseActivity['details'];
      break;
    }
  }

  drupal_add_library('system', 'drupal.collapse');
  drupal_add_css(drupal_get_path('module', 'pum_customer') . '/style.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  $page['intake']['#type'] = 'fieldset';
  $page['intake']['#title'] = t('Click to view original project request');
  $page['intake']['#prefix'] = '<div class="pum_customer_token_current_project_request">';
  $page['intake']['#suffix'] = '</div>';
  $page['intake']['details']['#markup'] = $projectIntake;
  $page['intake']['#attributes'] = array (
    'class' => array(
      'collapsible', 'collapsed'
    )
  );

  return drupal_render($page);
}

function _pum_customer_your_expert_will_arrive_block(&$block) {
  civicrm_initialize();
  $config = pum_customer_mycases_config::singleton();
  $session = CRM_Core_Session::singleton();
  $now = new DateTime();
  $nowSevenDays = new DateTime();
  $nowSevenDays->modify('+7 days');

  $sql = "SELECT ma.`".$config->ma_start_date['column_name']."` AS start_date, c.id as case_id
          FROM `".$config->main_activity_info['table_name']."` `ma` 
          INNER JOIN civicrm_case c ON ma.entity_id = c.id
          LEFT JOIN civicrm_case_contact cc ON c.id = cc.case_id
          LEFT JOIN civicrm_relationship r ON c.id = r.case_id
          WHERE ma.`".$config->ma_start_date['column_name']."` BETWEEN DATE(%1) AND DATE(%2)
          AND (c.case_type_id LIKE %3 OR c.case_type_id LIKE %4 OR c.case_type_id LIKE %5 OR c.case_type_id LIKE %6)
          AND (cc.contact_id = %7 OR r.contact_id_b = %7 OR r.contact_id_a = %7)
          AND c.status_id = %8
          ORDER BY ma.`".$config->ma_start_date['column_name']."` ASC
          LIMIT 0, 1";

  $params[1] = array($now->format('Y-m-d'), 'String');
  $params[2] = array($nowSevenDays->format('Y-m-d'), 'String');
  $params[3] = array('%'.CRM_Core_DAO::VALUE_SEPARATOR.$config->advice_case_type.CRM_Core_DAO::VALUE_SEPARATOR.'%', 'String');
  $params[4] = array('%'.CRM_Core_DAO::VALUE_SEPARATOR.$config->business_case_type.CRM_Core_DAO::VALUE_SEPARATOR.'%', 'String');
  $params[5] = array('%'.CRM_Core_DAO::VALUE_SEPARATOR.$config->seminar_case_type.CRM_Core_DAO::VALUE_SEPARATOR.'%', 'String');
  $params[6] = array('%'.CRM_Core_DAO::VALUE_SEPARATOR.$config->remote_coaching_case_type.CRM_Core_DAO::VALUE_SEPARATOR.'%', 'String');
  $params[7] = array($session->get('userID'), 'Integer');
  $params[8] = array($config->preperation_status, 'Integer');

  $dao = CRM_Core_DAO::executeQuery($sql, $params);
  if ($dao->fetch()) {
    $link = url('customer/upcoming-pickups', array('absolute'=> true));
    $date = new DateTime($dao->start_date);
    $days = $date->diff($now)->format('%a') + 1;
    if ($days <= 1) {
      $days = 'today';
    } else {
      $days = 'in '.$days.' days';
    }
    $block['content'] = '<p class="your_expert_will_arrive_in_x_days">Your expert will arrive '.$days.'<br /><a href="'.$link.'">click for Pickup Details.</a></p>';
    drupal_add_css(drupal_get_path('module', 'pum_customer') . '/style.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
}

function pum_customer_preprocess_html(&$vars) {
  if (in_array('page-customer-proposedexpert', $vars['classes_array'])
  || in_array('page-customer-business-programme-details', $vars['classes_array'])) {
    $vars['classes_array'][] = 'section-portal';
  }
}

function pum_customer_get_gender($gender_id) {
  civicrm_initialize();
  $option_group_id = civicrm_api3('OptionGroup', 'getvalue', array('name' => 'gender', 'return' => 'id'));
  $option_name = civicrm_api3('OptionValue', 'getvalue', array('value' => $gender_id, 'option_group_id' => $option_group_id, 'return' => 'name'));
  if (strtolower($option_name) == 'male') {
    return 'Mr.';
  } elseif (strtolower($option_name) == 'female') {
    return 'Mrs.';
  }
  return '';
}

function pum_customer_check_case_for_intake($case_type_id) {
  $config = pum_customer_mycases_config::singleton();
  $sep = CRM_Core_DAO::VALUE_SEPARATOR;
  $case_type = trim(str_replace($sep, ',', $case_type_id), ',');
  $case_types = explode(",", $case_type);
  if (in_array($config->project_intake_case_type, $case_types)) {
    return true;
  }
  return false;
}

function pum_customer_check_case_for_matching($case_status_id) {
  $config = pum_customer_mycases_config::singleton();
  if ($case_status_id == $config->matching_status) {
    return true;
  }
  return false;
}

function pum_customer_user_has_role($roles = array())
{
  global $user;
  foreach ($roles as $role) {
    if (in_array($role, $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

function pum_customer_views_api() {
  return array('api' => 3.0);
}

function pum_customer_get_role_ids($roles) {
  $rids = array();
  $available_roles = user_roles();
  foreach($roles as $role) {
    $rid = array_search($role, $available_roles);
    if ($rid !== false) {
      $rids[$rid] = $rid;
    }
  }
  
  return $rids;
}

function pum_customer_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'pum_customer'). '/views', '/.inc/');
  $views = array();
  civicrm_initialize();
  foreach ($files as $filepath => $file) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }
  return $views;
}

function _pum_customer_link_to_case_details($case_id, $case_type) {
  $config = pum_customer_mycases_config::singleton();
  $sep = CRM_Core_DAO::VALUE_SEPARATOR;
  $case_type = trim(str_replace($sep, ',', $case_type), ',');
  $case_types = explode(",", $case_type);
  if (in_array($config->project_intake_case_type, $case_types)) {
    return '';
  } else {
    return 'customer/case-details/'.$case_id;
  }
}

function _pum_customer_is_condition_completable_by_customer($activity_type_id) {
  $config = pum_customer_mycases_config::singleton();
  if (in_array($activity_type_id, $config->getCompletableConditions())) {
    return true;
  }
  return false;
}

function pum_customer_get_mainactivity_follow_up($case_id) {
  $ma = civicrm_api3('MainActivity', 'DebriefingCC', array('case_id' => $case_id));
  return $ma['follow_up'];
}

function pum_customer_get_mainactivity_summary($case_id) {
  $ma = civicrm_api3('MainActivity', 'DebriefingCC', array('case_id' => $case_id));
  return $ma['summary'];
}