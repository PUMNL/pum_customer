<?php

require_once 'conditions.inc';

function pum_customer_menu() {
  $items = array();

  $items['customer/condition/update/%'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'Update condition', //page title
    'description' => 'Update condition',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('pum_customer_condition_update_form', 3), //put the name of the form here
    'access callback' => 'pum_customer_user_has_role',
    'access arguments' => array(array('Customer (contact)', 'Representative')), // arg 1 loads the user, arg 2 is the role name
  );
  $items['customer/proposedexpert/cv/%'] = array(
    'title' => 'CV of Proposed expert',
    'description' => '',
    'page callback' => 'pum_customer_cv_proposedexpert',
    'page arguments' => array(3),
    'access callback' => 'pum_customer_user_has_role',
    'access arguments' => array(array('Customer (contact)', 'Representative')),
    'file' => 'pages/cv_proposedexpert.inc',
  );
  $items['customer/proposedexpert/cv/%/question'] = array(
    'title' => 'Ask question about proposed expert',
    'page callback' => 'drupal_get_form',
    'file' => 'pages/question_about_cv.inc',
    'page arguments' => array('pum_customer_question_about_cv', 3),
    'access callback' => 'pum_customer_user_has_role',
    'access arguments' => array(array('Customer (contact)', 'Representative')),
  );

  return $items;
}

function pum_customer_preprocess_html(&$vars) {
  if (in_array('page-customer-proposedexpert', $vars['classes_array'])) {
    $vars['classes_array'][] = 'section-portal';
  }
}

function pum_customer_get_gender($gender_id) {
  civicrm_initialize();
  $option_group_id = civicrm_api3('OptionGroup', 'getvalue', array('name' => 'gender', 'return' => 'id'));
  $option_name = civicrm_api3('OptionValue', 'getvalue', array('value' => $gender_id, 'option_group_id' => $option_group_id, 'return' => 'name'));
  if (strtolower($option_name) == 'male') {
    return 'Mr.';
  } elseif (strtolower($option_name) == 'female') {
    return 'Mrs.';
  }
  return '';
}

function pum_customer_check_case_for_intake($case_type_id) {
  $config = pum_customer_mycases_config::singleton();
  $sep = CRM_Core_DAO::VALUE_SEPARATOR;
  $case_type = trim(str_replace($sep, ',', $case_type_id), ',');
  $case_types = explode(",", $case_type);
  if (in_array($config->project_intake_case_type, $case_types)) {
    return true;
  }
  return false;
}

function pum_customer_check_case_for_matching($case_status_id) {
  $config = pum_customer_mycases_config::singleton();
  if ($case_status_id == $config->matching_status) {
    return true;
  }
  return false;
}

function pum_customer_user_has_role($roles = array())
{
  global $user;
  foreach ($roles as $role) {
    if (in_array($role, $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

function pum_customer_views_api() {
  return array('api' => 3.0);
}

function pum_customer_get_role_ids($roles) {
  $rids = array();
  $available_roles = user_roles();
  foreach($roles as $role) {
    $rid = array_search($role, $available_roles);
    if ($rid !== false) {
      $rids[$rid] = $rid;
    }
  }
  
  return $rids;
}

function pum_customer_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'pum_customer'). '/views', '/.inc/');
  $views = array();
  civicrm_initialize();
  foreach ($files as $filepath => $file) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }
  return $views;
}

function _pum_customer_link_to_case_details($case_id, $case_type) {
  $config = pum_customer_mycases_config::singleton();
  $sep = CRM_Core_DAO::VALUE_SEPARATOR;
  $case_type = trim(str_replace($sep, ',', $case_type), ',');
  $case_types = explode(",", $case_type);
  if (in_array($config->project_intake_case_type, $case_types)) {
    return '';
  } else {
    return 'customer/case-details/'.$case_id;
  }
}

function _pum_customer_is_condition_completable_by_customer($activity_type_id) {
  $config = pum_customer_mycases_config::singleton();
  if (in_array($activity_type_id, $config->getCompletableConditions())) {
    return true;
  }
  return false;
}

function pum_customer_get_mainactivity_follow_up($case_id) {
  $ma = civicrm_api3('MainActivity', 'DebriefingCC', array('case_id' => $case_id));
  return $ma['follow_up'];
}

function pum_customer_get_mainactivity_summary($case_id) {
  $ma = civicrm_api3('MainActivity', 'DebriefingCC', array('case_id' => $case_id));
  return $ma['summary'];
}